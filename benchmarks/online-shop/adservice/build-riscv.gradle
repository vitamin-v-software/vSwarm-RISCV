// plugins {
//     id 'com.google.protobuf' version '0.8.19'
//     id 'com.github.sherter.google-java-format' version '0.9'
//     id 'idea'
//     id 'application'
// }
plugins {
    id 'com.google.protobuf' version '0.9.4'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
}
repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Ad Service'
group = "adservice"
version = "0.1.0-SNAPSHOT"

// def opencensusVersion = "0.31.1"
// def grpcVersion = "1.32.1"
// def jacksonVersion = "2.13.3"
// def protocVersion = "3.21.4"
def opencensusVersion = "0.31.1"
def grpcVersion = "1.69.0"
def jacksonVersion = "2.17.1"
def protocVersion = "3.25.3"

tasks.withType(JavaCompile) {
    //sourceCompatibility = JavaVersion.VERSION_1_8
    //targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation "com.google.api.grpc:proto-google-common-protos:2.9.2",
                "io.opencensus:opencensus-api:${opencensusVersion}",
                "io.opencensus:opencensus-contrib-grpc-metrics:${opencensusVersion}",
                "io.opencensus:opencensus-contrib-grpc-util:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-trace-jaeger:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-stats-stackdriver:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-trace-stackdriver:${opencensusVersion}",
                "io.opencensus:opencensus-exporter-trace-logging:${opencensusVersion}",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty-shaded:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "io.grpc:grpc-census:${grpcVersion}",
                "io.grpc:grpc-core:${grpcVersion}",
                "io.grpc:grpc-inprocess:${grpcVersion}",
                "org.apache.logging.log4j:log4j-core:2.17.2"

        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "io.opencensus:opencensus-contrib-log-correlation-log4j2:${opencensusVersion}",
                "io.opencensus:opencensus-impl:${opencensusVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.53.Final",
                "io.grpc:grpc-netty-shaded:${grpcVersion}"
              

    }
}

                // "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3",
                // "org.glassfish.jaxb:jaxb-runtime:2.3.1"
  // "io.grpc:grpc-protobuf:${grpcVersion}",
                // "io.grpc:grpc-stub:${grpcVersion}",
                // "io.grpc:grpc-services:${grpcVersion}",
                // "io.grpc:grpc-inprocess:${grpcVersion}",
                // "io.grpc:grpc-census:${grpcVersion}",
                // "io.grpc:grpc-core:${grpcVersion}",
                // "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3",
                // "org.glassfish.jaxb:jaxb-runtime:2.3.1"

// protobuf {
//     protoc {
//         artifact = "com.google.protobuf:protoc:${protocVersion}"
//     }
//     plugins {
//         grpc {
//             artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
//         }
//     }
//     generateProtoTasks {
//         all()*.plugins {
//             grpc {}
//         }
//         ofSourceSet('main')
//     }
// }
protobuf {
    protoc {
        // Use system-installed binary instead of downloading one
        path = '/usr/bin/protoc'  // or wherever `protoc` is installed
    }
    plugins {
        grpc {
            path = '/usr/bin/grpc_java_plugin'  // ðŸ‘ˆ tell Gradle where to find the native binary
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

googleJavaFormat {
    toolVersion '1.7'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
// task downloadRepos(type: Copy) {
//     // from configurations.compile
//     from configurations.implementation
//     into offlineCompile
//     // from configurations.runtime
//     from configurations.runtimeClasspath
//     into offlineCompile
// }
configurations {
    offlineDeps {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom implementation, runtimeClasspath
    }
}

task downloadRepos(type: Copy) {
    from configurations.offlineDeps
    into offlineCompile
}
task adService(type: CreateStartScripts) {
    mainClassName = 'hipstershop.AdService'
    applicationName = 'AdService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
    defaultJvmOpts =
            ["-Dlog4j2.contextDataInjector=io.opencensus.contrib.logcorrelation.log4j2.OpenCensusTraceContextDataInjector"] 
            // ,"--add-modules=java.xml.bind"]
            //  "-agentpath:/opt/cprof/profiler_java_agent.so=-cprof_service=adservice,-cprof_service_version=1.0.0"]
}

task adServiceClient(type: CreateStartScripts) {
    mainClassName = 'hipstershop.AdServiceClient'
    applicationName = 'AdServiceClient'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
    defaultJvmOpts =
            ["-Dlog4j2.contextDataInjector=io.opencensus.contrib.logcorrelation.log4j2.OpenCensusTraceContextDataInjector"]
            // ,"--add-modules=java.xml.bind"]
            //  "-agentpath:/opt/cprof/profiler_java_agent.so=-cprof_service=adserviceclient,-cprof_service_version=1.0.0"]
}

applicationDistribution.into('bin') {
    from(adService)
    from(adServiceClient)
    fileMode = 0755
}
